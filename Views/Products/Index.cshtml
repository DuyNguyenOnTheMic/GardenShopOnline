@model List<GardenShopOnline.Models.Product>

@{
    ViewBag.Title = "Products";
    string searchKey = Request.QueryString["searchKey"] ?? string.Empty;
    string fromPrice = Request.QueryString["fromPrice"] ?? string.Empty;
    string toPrice = Request.QueryString["toPrice"] ?? string.Empty;
}

<!-- Begin Main Content Area -->
<main class="main-content">
    <div class="shop-area mb-5">
        <div class="container">
            <div class="row">
                <div class="col-xl-3 col-lg-4 order-2 order-lg-1 pt-5 pt-lg-0">
					<div class="sidebar-area">
						<form action="@Url.Action("Index", "Products")" id="widgets-searchbox">
							<div class="widgets-searchbox mb-4">
								@Html.TextBox("searchKey", searchKey, new { @type = "search", @class = "input-field", @placeholder = "Search" })
								<button class="widgets-searchbox-btn" type="submit">
									<i class="fa fa-search"></i>
								</button>
							</div>
							<div class="short">
								@Html.DropDownList("Type", null, "Sort by type", new { @class = "nice-select filter-select mb-3 w-100", @id = "typeFilter" })
							</div>
							<div class="short">
								@Html.DropDownList("Category", null, "Sort by category", new { @class = "nice-select filter-select w-100", @id = "categoryFilter" })
							</div>
							<div class="short">
								<label class="form-label mt-4">Price range</label>
								<div class="row">
									<div class="col-xl-6 mb-3 mb-xl-0">
										@Html.TextBox("fromPrice", fromPrice, new { @type = "text", @class = "form-control input-price", @placeholder = "đ From" })
									</div>
									<div class="col-xl-6">
										@Html.TextBox("toPrice", toPrice, new { @type = "text", @class = "form-control input-price", @placeholder = "đ To" })
									</div>
								</div>
								<div class="d-grid gap-2">
									<button type="submit" class="btn btn-block btn-pronia-primary mt-3">Apply</button>
								</div>
							</div>
						</form>
					</div>
                </div>
                <div class="col-xl-9 col-lg-8 order-1 order-lg-2">
                    <div class="product-topbar">
                        <ul>
                            <li class="page-count">
                                <span>@Model.Count</span> Product Found of <span>@ViewData["TotalCount"]</span>
                            </li>
                        </ul>
                    </div>
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="grid-view" role="tabpanel" aria-labelledby="grid-view-tab">
                            <div class="product-grid-view row g-y-20">
                                @if (Model.Any())
                                {
                                    foreach (var item in Model)
                                    {
                                        <div class="col-xl-3 col-md-4 col-sm-6">
                                            <div class="product-item">
                                                <div class="product-img">
                                                    <a href="@Url.Action("Details", "Products", new { id = item.ID })">
                                                        <img class="primary-img" src="~/assets/images/@(item.ImageProducts.FirstOrDefault()?.Image)" alt="Product Images">
                                                    </a>
                                                    @if (!User.IsInRole("Admin") && !User.IsInRole("Staff") && item.Quantity > 0)
                                                    {
                                                        <div class="product-add-action">
                                                            <ul>
                                                                <li>
                                                                    <a class="add-to-cart" href="@Url.Action("AddToCart", "ShoppingCart", new { id = item.ID })" data-tippy="Add to cart" data-tippy-inertia="true" data-tippy-animation="shift-away" data-tippy-delay="50" data-tippy-arrow="true" data-tippy-theme="sharpborder">
                                                                        <i class="pe-7s-cart"></i>
                                                                    </a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="product-content">
                                                    <a class="product-name" href="@Url.Action("Details", "Products", new { id = item.ID })">@item.Name</a>
                                                    <div class="price-box pb-1">
                                                        <span class="new-price">@item.Price.ToString("N0") ₫</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center mt-3">No results found <i class="pe-7s-help1"></i></div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<!-- Main Content Area End Here -->

@section scripts {
    <script type="text/javascript">
        $('.add-to-cart').on('click', function (e) {
            e.preventDefault();
            // Call action to add product to cart
            $.ajax({
                url: $(this).attr('href'),
                type: 'GET'
            }).done(function (data) {
                if (!data.error) {
                    // Refresh mini cart
                    getMiniCart();
                    toastr.options.positionClass = 'toast-bottom-right';
                    toastr["success"]("Add succeeded!");
                } else {
                    // Show error message
                    toastr.options.positionClass = 'toast-bottom-right';
                    toastr["error"]("Oops, you have overselected product inventory! Product only have " + data.quantity + " items left");
                }
            });
        });

        // Handle event on filter change
        $(".filter-select").on('change', function () {
            getParameters();
        });

        // Handle event on search form submit
        $('#widgets-searchbox').submit(function (e) {
            e.preventDefault();
            getParameters();
        });

        // Handle thousand seperator input for price
		$('.input-price').on('keyup', function (e) {
			// When user select text in the document, also abort.
			var selection = window.getSelection().toString();
			if (selection !== '') {
				return;
			}
			// When the arrow keys are pressed, abort.
			if ($.inArray(e.keyCode, [38, 40, 37, 39]) !== -1) {
				return;
			}
			var $this = $(this);
			// Get the value.
			var input = $this.val();
			input = input.replace(/[\D\s\._\-]+/g, "");
			input = input ? parseInt(input, 10) : 0;
			$this.val(function () {
				return (input === 0) ? '' : input.toLocaleString('en-US');
			});
        });

        function getParameters() {
            var searchKey = $('#searchKey').val();
            var typeId = $("#typeFilter").val();
            var categoryId = $('#categoryFilter').val();
            var fromPrice = $('#fromPrice').val();
			var toPrice = $('#toPrice').val();
			GetProductList(searchKey, typeId, categoryId, fromPrice, toPrice)
        }

		function GetProductList(searchKey, typeId, categoryId, fromPrice, toPrice) {
			var url = new URL(location.href);
			var params = new URLSearchParams(url.search);
			params.set('searchKey', searchKey);
			typeId ? params.set('typeId', typeId) : params.delete('typeId');
			categoryId ? params.set('categoryId', categoryId) : params.delete('categoryId');
			fromPrice ? params.set('fromPrice', fromPrice) : params.delete('fromPrice');
			toPrice ? params.set('toPrice', toPrice) : params.delete('toPrice');
			url.search = params.toString();
			location.href = url.toString();
		}
    </script>
}